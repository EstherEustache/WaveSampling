// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// IBarma
double IBarma(const arma::sp_mat& W, const arma::vec& s);
RcppExport SEXP _wave_IBarma(SEXP WSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(IBarma(W, s));
    return rcpp_result_gen;
END_RCPP
}
// distUnitk
arma::vec distUnitk(arma::mat X, int k, bool tore, double toreBound);
RcppExport SEXP _wave_distUnitk(SEXP XSEXP, SEXP kSEXP, SEXP toreSEXP, SEXP toreBoundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type tore(toreSEXP);
    Rcpp::traits::input_parameter< double >::type toreBound(toreBoundSEXP);
    rcpp_result_gen = Rcpp::wrap(distUnitk(X, k, tore, toreBound));
    return rcpp_result_gen;
END_RCPP
}
// projOp
arma::vec projOp(arma::vec v, arma::vec u);
RcppExport SEXP _wave_projOp(SEXP vSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(projOp(v, u));
    return rcpp_result_gen;
END_RCPP
}
// colSumsiter
arma::vec colSumsiter(const arma::sp_mat& x);
RcppExport SEXP _wave_colSumsiter(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(colSumsiter(x));
    return rcpp_result_gen;
END_RCPP
}
// rowSumsiter
arma::vec rowSumsiter(const arma::sp_mat& x);
RcppExport SEXP _wave_rowSumsiter(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rowSumsiter(x));
    return rcpp_result_gen;
END_RCPP
}
// wave
arma::vec wave(const arma::mat& X, const arma::vec& pik, bool tore, bool jitter, bool oneD, bool comment);
RcppExport SEXP _wave_wave(SEXP XSEXP, SEXP pikSEXP, SEXP toreSEXP, SEXP jitterSEXP, SEXP oneDSEXP, SEXP commentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pik(pikSEXP);
    Rcpp::traits::input_parameter< bool >::type tore(toreSEXP);
    Rcpp::traits::input_parameter< bool >::type jitter(jitterSEXP);
    Rcpp::traits::input_parameter< bool >::type oneD(oneDSEXP);
    Rcpp::traits::input_parameter< bool >::type comment(commentSEXP);
    rcpp_result_gen = Rcpp::wrap(wave(X, pik, tore, jitter, oneD, comment));
    return rcpp_result_gen;
END_RCPP
}
// wpik
arma::sp_mat wpik(arma::mat X, arma::vec pik, double bound, bool tore, bool jitter, double toreBound);
RcppExport SEXP _wave_wpik(SEXP XSEXP, SEXP pikSEXP, SEXP boundSEXP, SEXP toreSEXP, SEXP jitterSEXP, SEXP toreBoundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pik(pikSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    Rcpp::traits::input_parameter< bool >::type tore(toreSEXP);
    Rcpp::traits::input_parameter< bool >::type jitter(jitterSEXP);
    Rcpp::traits::input_parameter< double >::type toreBound(toreBoundSEXP);
    rcpp_result_gen = Rcpp::wrap(wpik(X, pik, bound, tore, jitter, toreBound));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_wave_IBarma", (DL_FUNC) &_wave_IBarma, 2},
    {"_wave_distUnitk", (DL_FUNC) &_wave_distUnitk, 4},
    {"_wave_projOp", (DL_FUNC) &_wave_projOp, 2},
    {"_wave_colSumsiter", (DL_FUNC) &_wave_colSumsiter, 1},
    {"_wave_rowSumsiter", (DL_FUNC) &_wave_rowSumsiter, 1},
    {"_wave_wave", (DL_FUNC) &_wave_wave, 6},
    {"_wave_wpik", (DL_FUNC) &_wave_wpik, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_wave(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
